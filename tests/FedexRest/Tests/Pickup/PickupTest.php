<?php declare(strict_types=1);

namespace FedexRest\Tests\Pickup;

use Carbon\Carbon;
use FedexRest\Authorization\Authorize;
use FedexRest\Services\Pickup\Entity\Address;
use FedexRest\Entity\Dimensions;
use FedexRest\Entity\Item;
use FedexRest\Services\Ship\Entity\Label;
use FedexRest\Entity\Person;
use FedexRest\Services\Ship\Entity\ShippingChargesPayment;
use FedexRest\Services\Pickup\Entity\Weight;
use FedexRest\Exceptions\MissingAccountNumberException;
use FedexRest\Services\Pickup\CancelPickup;
use FedexRest\Services\Pickup\CheckPickupAvailability;
use FedexRest\Services\Pickup\CreatePickup;
use FedexRest\Services\Pickup\Entity\Contact;
use FedexRest\Services\Pickup\Entity\OriginDetail;
use FedexRest\Services\Pickup\Entity\PickupLocation;
use FedexRest\Services\Pickup\Entity\ShipmentAttributes;
use FedexRest\Services\Pickup\Entity\Weight as EntityWeight;
use FedexRest\Services\Ship\Exceptions\MissingLabelException;
use FedexRest\Services\Ship\Exceptions\MissingLabelResponseOptionsException;
use FedexRest\Services\Ship\Exceptions\MissingShippingChargesPaymentException;
use FedexRest\Services\Ship\CreateShipment;
use FedexRest\Services\Ship\Type\ImageType;
use FedexRest\Services\Ship\Type\LabelDocOptionType;
use FedexRest\Services\Ship\Type\LabelResponseOptionsType;
use FedexRest\Services\Ship\Type\LabelStockType;
use FedexRest\Services\Ship\Type\LinearUnits;
use FedexRest\Services\Ship\Type\PackagingType;
use FedexRest\Services\Ship\Type\PickupType;
use FedexRest\Services\Ship\Type\ServiceType;
use FedexRest\Services\Ship\Type\WeightUnits;
use PHPUnit\Framework\TestCase;

class PickupTest extends TestCase
{
    protected Authorize $auth;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->auth = (new Authorize)
            ->setClientId('l7749d031872cf4b55a7889376f360d045')
            ->setClientSecret('bd59d91084e8482895d4ae2fb4fb79a3');
    }

    public function testCheckPickupAvailability() : void
    {
        $request = (new CheckPickupAvailability())
            ->setAccessToken((string) $this->auth->authorize()->access_token)
            ->setAssociatedAccountNumber('740561073')
            ->setDispatchDate((new \DateTime())->modify('+2 weekdays'))
            ->setPackageReadyTime((new \DateTime())->modify('+2 weekdays')->setTime(12, 0))
            ->setCustomerCloseTime((new \DateTime())->modify('+2 weekdays')->setTime(18, 0))
            ->setPickupRequestType('FUTURE_DAY')
            ->setPickupAddress((new Address())
                ->setCity('Irving')
                ->setPostalCode('75063')
                ->setStreetLines(['STREET LINE 1'])
                ->setCountryCode('US')
                ->setStateOrProvinceCode('TX')
            )
            ->setShipmentAttributes((new ShipmentAttributes())
                ->setServiceType('PRIORITY_OVERNIGHT')
                ->setDimensions((new Dimensions())
                    ->setHeight(10)
                    ->setLength(10)
                    ->setUnits(LinearUnits::_CENTIMETER)
                    ->setWidth(10)
                )
                ->setPackagingType(PackagingType::_FEDEX_BOX)
                ->setWeight((new Weight())
                    ->setValue(10)
                    ->setUnits(WeightUnits::_KILOGRAM)
                )
            )
            ->setCarriers('FDXE')
            ->setCountryRelationship('DOMESTIC')
            ->request();

        /*
        TODO: Debug this error
        {
            ["transactionId"]=>
            string(36) "c258bd4d-e1da-4f36-b79e-683cc1c301f6"
            ["errors"]=>
            array(1) {
                [0]=>
                object(stdClass)#740 (2) {
                ["code"]=>
                string(21) "INTERNAL.SERVER.ERROR"
                ["message"]=>
                string(143) "We encountered an unexpected error and are working to resolve the issue. We apologize for any inconvenience. Please check back at a later time."
                }
            }
        }
        */

        $this->assertObjectHasAttribute('transactionId', $request);
        $this->assertObjectNotHasAttribute('errors', $request);
        $this->assertObjectHasAttribute('output', $request);
    }

    public function testCreatePickup() : void
    {
        $request = (new CreatePickup())
            ->setAccessToken((string) $this->auth->authorize()->access_token)
            ->setAssociatedAccountNumber('740561073')
            ->setOriginDetail((new OriginDetail())
                ->setReadyDateTimestamp((new \DateTime())->modify('+2 weekdays'))
                ->setCustomerCloseTime((new \DateTime())->modify('+2 weekdays')->setTime(18, 0))
                ->setPickupDateType('FUTURE_DAY')
                ->setPickupLocation((new PickupLocation())
                    ->setContact((new Contact())
                        ->setPersonName('TEST PERSON')
                        ->setCompanyName('TEST COMPANY')
                        ->setPhoneNumber('731123456')
                    )
                    ->setAddress((new Address())
                        ->setCity('Irving')
                        ->setPostalCode('75063')
                        ->setStreetLines(['STREET LINE 1'])
                        ->setCountryCode('US')
                        ->setStateOrProvinceCode('TX')
                    )
                )
                ->setPackageLocation('NONE')
            )
            ->setCarrierCode('FDXG')
            ->setRemarks('Please ring the bell')
            ->request();

        /*
        object(stdClass)#727 (2) {
            ["transactionId"]=>
            string(36) "04dfbe52-5733-4470-bf46-7739ae6aaa38"
            ["output"]=>
            object(stdClass)#732 (1) {
                ["pickupConfirmationCode"]=>
                string(10) "CPU3332220"
            }
        }
        */
        $this->assertObjectHasAttribute('transactionId', $request);
        $this->assertObjectNotHasAttribute('errors', $request);
        $this->assertObjectHasAttribute('output', $request);
        $this->assertObjectHasAttribute('pickupConfirmationCode', $request->output);

        /*
         TODO: Find out what these errors mean :)
         object(stdClass)#740 (2) {
            ["transactionId"]=>
            string(36) "1fe60bfe-23da-4d7d-9483-7b5ef965b527"
            ["errors"]=>
            array(2) {
                [0]=>
                object(stdClass)#712 (2) {
                ["code"]=>
                string(38) "FREIGHT.PICKUPCONFIRMATIONCODE.INVALID"
                ["message"]=>
                string(68) "Missing or invalid confirmation number. Please update and try again."
                }
                [1]=>
                object(stdClass)#711 (2) {
                ["code"]=>
                string(36) "PICKUPCREATE.PACKAGELOCATION.INVALID"
                ["message"]=>
                string(31) "Location is missing or invalid."
                }
            }
            }
        $cancelRequest = (new CancelPickup())
            ->setAccessToken((string) $this->auth->authorize()->access_token)
            ->setAssociatedAccountNumber('740561073')
            ->setScheduledDate((new \DateTime())->modify('+2 weekdays'))
            ->setPickupConfirmationCode($request->output->pickupConfirmationCode)
            ->request();
        
        var_dump($cancelRequest);

        $this->assertObjectHasAttribute('transactionId', $cancelRequest);
        $this->assertObjectNotHasAttribute('errors', $cancelRequest);
        $this->assertObjectHasAttribute('output', $cancelRequest); */
    }
}
